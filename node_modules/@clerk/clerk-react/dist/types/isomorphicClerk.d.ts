import type { ActiveSessionResource, AuthenticateWithMetamaskParams, BeforeEmitCallback, Clerk, ClientResource, CreateOrganizationParams, CreateOrganizationProps, HandleEmailLinkVerificationParams, HandleMagicLinkVerificationParams, HandleOAuthCallbackParams, InstanceType, ListenerCallback, LoadedClerk, OrganizationListProps, OrganizationMembershipResource, OrganizationProfileProps, OrganizationResource, OrganizationSwitcherProps, RedirectOptions, SDKMetadata, SetActiveParams, SignInProps, SignInRedirectOptions, SignOut, SignUpProps, SignUpRedirectOptions, UnsubscribeCallback, UserButtonProps, UserProfileProps, UserResource } from '@clerk/types';
import type { BrowserClerk, HeadlessBrowserClerk, IsomorphicClerkOptions } from './types';
export interface Global {
    Clerk?: HeadlessBrowserClerk | BrowserClerk;
}
type IsomorphicLoadedClerk = Omit<LoadedClerk, 
/**
 * Override ClerkJS methods in order to support premountMethodCalls
 */
'buildSignInUrl' | 'buildSignUpUrl' | 'buildUserProfileUrl' | 'buildCreateOrganizationUrl' | 'buildOrganizationProfileUrl' | 'buildHomeUrl' | 'buildUrlWithAuth' | 'redirectWithAuth' | 'redirectToSignIn' | 'redirectToSignUp' | 'handleRedirectCallback' | 'handleUnauthenticated' | 'authenticateWithMetamask' | 'createOrganization' | 'getOrganization' | 'mountUserButton' | 'mountOrganizationList' | 'mountOrganizationSwitcher' | 'mountOrganizationProfile' | 'mountCreateOrganization' | 'mountSignUp' | 'mountSignIn' | 'mountUserProfile' | 'client' | 'getOrganizationMemberships'> & {
    redirectWithAuth: (...args: Parameters<Clerk['redirectWithAuth']>) => void;
    redirectToSignIn: (options: SignInRedirectOptions) => void;
    redirectToSignUp: (options: SignUpRedirectOptions) => void;
    handleRedirectCallback: (params: HandleOAuthCallbackParams) => void;
    handleUnauthenticated: () => void;
    authenticateWithMetamask: (params: AuthenticateWithMetamaskParams) => Promise<void>;
    createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource | void>;
    getOrganization: (organizationId: string) => Promise<OrganizationResource | void>;
    buildSignInUrl: (opts?: RedirectOptions) => string | void;
    buildSignUpUrl: (opts?: RedirectOptions) => string | void;
    buildUserProfileUrl: () => string | void;
    buildCreateOrganizationUrl: () => string | void;
    buildOrganizationProfileUrl: () => string | void;
    buildHomeUrl: () => string | void;
    buildUrlWithAuth: (to: string) => string | void;
    mountUserButton: (node: HTMLDivElement, props: UserButtonProps) => void;
    mountOrganizationList: (node: HTMLDivElement, props: OrganizationListProps) => void;
    mountOrganizationSwitcher: (node: HTMLDivElement, props: OrganizationSwitcherProps) => void;
    mountOrganizationProfile: (node: HTMLDivElement, props: OrganizationProfileProps) => void;
    mountCreateOrganization: (node: HTMLDivElement, props: CreateOrganizationProps) => void;
    mountSignUp: (node: HTMLDivElement, props: SignUpProps) => void;
    mountSignIn: (node: HTMLDivElement, props: SignInProps) => void;
    mountUserProfile: (node: HTMLDivElement, props: UserProfileProps) => void;
    client: ClientResource | undefined;
    getOrganizationMemberships: () => Promise<OrganizationMembershipResource[] | void>;
};
export default class IsomorphicClerk implements IsomorphicLoadedClerk {
    #private;
    private readonly mode;
    private readonly options;
    private readonly Clerk;
    private clerkjs;
    private preopenSignIn?;
    private preopenSignUp?;
    private preopenUserProfile?;
    private preopenOrganizationProfile?;
    private preopenCreateOrganization?;
    private premountSignInNodes;
    private premountSignUpNodes;
    private premountUserProfileNodes;
    private premountUserButtonNodes;
    private premountOrganizationProfileNodes;
    private premountCreateOrganizationNodes;
    private premountOrganizationSwitcherNodes;
    private premountOrganizationListNodes;
    private premountMethodCalls;
    private loadedListeners;
    get publishableKey(): string | undefined;
    get loaded(): boolean;
    static getOrCreateInstance(options: IsomorphicClerkOptions): IsomorphicClerk;
    static clearInstance(): void;
    get domain(): string;
    get proxyUrl(): string;
    constructor(options: IsomorphicClerkOptions);
    get sdkMetadata(): SDKMetadata | undefined;
    get instanceType(): InstanceType | undefined;
    get frontendApi(): string;
    get isStandardBrowser(): boolean;
    get isSatellite(): boolean;
    isReady: () => boolean;
    buildSignInUrl: (opts?: RedirectOptions) => string | void;
    buildSignUpUrl: (opts?: RedirectOptions) => string | void;
    buildUserProfileUrl: () => string | void;
    buildCreateOrganizationUrl: () => string | void;
    buildOrganizationProfileUrl: () => string | void;
    buildHomeUrl: () => string | void;
    buildUrlWithAuth: (to: string) => string | void;
    handleUnauthenticated: () => void;
    loadClerkJS(): Promise<HeadlessBrowserClerk | BrowserClerk | undefined>;
    addOnLoaded: (cb: () => void) => void;
    emitLoaded: () => void;
    private hydrateClerkJS;
    get version(): string | undefined;
    get client(): ClientResource | undefined;
    get session(): ActiveSessionResource | undefined | null;
    get user(): UserResource | undefined | null;
    get organization(): OrganizationResource | undefined | null;
    get __unstable__environment(): any;
    __unstable__setEnvironment(...args: any): void;
    __unstable__updateProps: (props: any) => any;
    /**
     * `setActive` can be used to set the active session and/or organization.
     */
    setActive: ({ session, organization, beforeEmit }: SetActiveParams) => Promise<void>;
    setSession: (session: ActiveSessionResource | string | null, beforeEmit?: BeforeEmitCallback) => Promise<void>;
    openSignIn: (props?: SignInProps) => void;
    closeSignIn: () => void;
    openUserProfile: (props?: UserProfileProps) => void;
    closeUserProfile: () => void;
    openOrganizationProfile: (props?: OrganizationProfileProps) => void;
    closeOrganizationProfile: () => void;
    openCreateOrganization: (props?: CreateOrganizationProps) => void;
    closeCreateOrganization: () => void;
    openSignUp: (props?: SignUpProps) => void;
    closeSignUp: () => void;
    mountSignIn: (node: HTMLDivElement, props: SignInProps) => void;
    unmountSignIn: (node: HTMLDivElement) => void;
    mountSignUp: (node: HTMLDivElement, props: SignUpProps) => void;
    unmountSignUp: (node: HTMLDivElement) => void;
    mountUserProfile: (node: HTMLDivElement, props: UserProfileProps) => void;
    unmountUserProfile: (node: HTMLDivElement) => void;
    mountOrganizationProfile: (node: HTMLDivElement, props: OrganizationProfileProps) => void;
    unmountOrganizationProfile: (node: HTMLDivElement) => void;
    mountCreateOrganization: (node: HTMLDivElement, props: CreateOrganizationProps) => void;
    unmountCreateOrganization: (node: HTMLDivElement) => void;
    mountOrganizationSwitcher: (node: HTMLDivElement, props: OrganizationSwitcherProps) => void;
    unmountOrganizationSwitcher: (node: HTMLDivElement) => void;
    mountOrganizationList: (node: HTMLDivElement, props: OrganizationListProps) => void;
    unmountOrganizationList: (node: HTMLDivElement) => void;
    mountUserButton: (node: HTMLDivElement, userButtonProps: UserButtonProps) => void;
    unmountUserButton: (node: HTMLDivElement) => void;
    addListener: (listener: ListenerCallback) => UnsubscribeCallback;
    navigate: (to: string) => void;
    redirectWithAuth: (to: string) => void;
    redirectToSignIn: (opts: SignInRedirectOptions) => void;
    redirectToSignUp: (opts: SignUpRedirectOptions) => void;
    redirectToUserProfile: () => void;
    redirectToHome: () => void;
    redirectToOrganizationProfile: () => void;
    redirectToCreateOrganization: () => void;
    handleRedirectCallback: (params: HandleOAuthCallbackParams) => void;
    /**
     * @deprecated Use `handleEmailLinkVerification` instead.
     */
    handleMagicLinkVerification: (params: HandleMagicLinkVerificationParams) => Promise<void>;
    handleEmailLinkVerification: (params: HandleEmailLinkVerificationParams) => Promise<void>;
    authenticateWithMetamask: (params: AuthenticateWithMetamaskParams) => Promise<void>;
    createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource | void>;
    getOrganizationMemberships: () => Promise<OrganizationMembershipResource[] | void>;
    getOrganization: (organizationId: string) => Promise<OrganizationResource | void>;
    signOut: SignOut;
}
export {};
//# sourceMappingURL=isomorphicClerk.d.ts.map